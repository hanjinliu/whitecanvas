[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "whitecanvas"
dynamic = ["version"]
description = 'A type safe and backend independent plotting library for Python.'
readme = "README.md"
requires-python = ">=3.9"
license = { file = "LICENSE" }
keywords = []
authors = [
  { name = "Hanjin Liu", email = "liuhanjin-sc@g.ecc.u-tokyo.ac.jp" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "typing_extensions>=4.5.0",
  "numpy>=1.23.2",
  "psygnal>=0.9.4",
  "cmap>=0.1.2",
]


[project.optional-dependencies]
matplotlib = [
  "matplotlib>=3.4.3,!=3.8.0",
]

pyqtgraph = [
  "pyqtgraph>=0.13.3",
  "qtpy>=2.4.1",
]

plotly = [
  "plotly>=5.3.1",
  "kaleido>=0.2.1",
]

vispy = [
  "vispy>=0.14.1",
]

bokeh = [
  "bokeh>=3.3.1",
]

testing = [
  "pytest",
  "pytest-qt",
  "pytest-cov",
  "imageio",
  "qtpy>=2.4.1",
  "pyqt5>=5.15.4",
  "ipywidgets>=8.0.0",
  "matplotlib>=3.8.2",
  "pyqtgraph>=0.13.3",
  "plotly>=5.3.1",
  "vispy>=0.14.1",
  "bokeh>=3.3.1",
  "pandas>=1.3.3",
  "polars>=0.20.10",
]

docs = [
  "mkdocs",
  "mkdocs-autorefs==0.5.0",
  "mkdocs-material==9.5.2",
  "mkdocs-material-extensions==1.3.1",
  "mkdocstrings==0.24.0",
  "mkdocstrings-python==1.7.5",
  "mkdocs-gen-files",
  "matplotlib>=3.8.2",
  "imageio>=2.9.0",
  "plotly>=5.3.1",
]

[project.urls]
Documentation = "https://github.com/hanjinliu/whitecanvas#readme"
Issues = "https://github.com/hanjinliu/whitecanvas/issues"
Source = "https://github.com/hanjinliu/whitecanvas"

[tool.hatch.version]
path = "whitecanvas/__init__.py"

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.9", "3.10", "3.11"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:whitecanvas tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.hatch.envs.test]
features = ["testing"]

[tool.hatch.envs.test.scripts]
run = "pytest -v --cov=./whitecanvas --cov-report=xml"

[tool.black]
target-version = ["py37"]
line-length = 88
skip-string-normalization = true

[tool.ruff]
target-version = "py37"
line-length = 88
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "F",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  "A002", "A003", "ARG001", "ARG002",
  # Allow non-abstract empty methods in abstract base classes
  "B027", "B904", "B006",
  "E741",
  "N802",  # Qt function names are not snake_case
  # Ignore checks for possible passwords
  "S101", "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915", "PLW0603",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]
exclude = ["tests", "docs", "examples"]

[tool.ruff.isort]
known-first-party = ["whitecanvas"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]
"whitecanvas/theme/_dataclasses.py" = ["RUF"]
"whitecanvas/backend/**/*" = ["F401"]

[tool.coverage.run]
source_pkgs = ["whitecanvas", "tests"]
branch = true
parallel = true
omit = [
  "whitecanvas/__about__.py",
]

[tool.coverage.paths]
whitecanvas = ["*/whitecanvas/whitecanvas"]
tests = ["tests", "*/whitecanvas/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "@overload",
  "@abstractmethod",
]
